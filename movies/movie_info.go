package movies

import (
	"fmt"
	"log"
	"strings"
	"unicode/utf8"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/luzhnov-aleksei/kinobot/api"
)

func HandleMovieSelection(bot *tgbotapi.BotAPI, update *tgbotapi.Update) {
	userID := update.CallbackQuery.From.ID
	selectedMovieID := update.CallbackQuery.Data

	// –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
	movies, exists := userMovieSelections[userID]
	if !exists {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
		if _, err := bot.Send(msg); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
		return
	}

	// –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∏–ª—å–º –ø–æ ID
	var selectedMovie *api.Cinema
	for _, movie := range movies {
		if fmt.Sprint(movie.ID) == selectedMovieID {
			selectedMovie = &movie
			break
		}
	}

	if selectedMovie != nil {
		film, imageURL, err := FormatMovieInfo(selectedMovie)
		if err != nil {
			text := fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: %s", err)
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, text)
			if _, err := bot.Send(msg); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
			return
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –≤–º–µ—Å—Ç–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
		photo := tgbotapi.NewInputMediaPhoto(tgbotapi.FileURL(imageURL))
		photo.Caption = film
		photo.ParseMode = "HTML"

		media := []interface{}{photo}
		mediaGroup := tgbotapi.MediaGroupConfig{
			ChatID: update.CallbackQuery.Message.Chat.ID,
			Media:  media,
		}

		_, err = bot.SendMediaGroup(mediaGroup)
		if err != nil {
			text := fmt.Sprintf("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: %s", err)
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, text)
			if _, err := bot.Send(msg); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}

		}

	} else {
		msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
		if _, err := bot.Send(msg); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}
	}
}

// —Ç–∏–ø: —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, –∞–Ω–∏–º–µ –∏ —Ç.–¥.
func TypeFilm(TypeNumber int) string {
	switch TypeNumber {
	case 1:
		return "–§–∏–ª—å–º"
	case 2:
		return "–°–µ—Ä–∏–∞–ª"
	case 3:
		return "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º"
	case 4:
		return "–ê–Ω–∏–º–µ"
	case 5:
		return "–ú—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª"
	default:
		return ""
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
func FormatMovieInfo(movie *api.Cinema) (film string, picURL string, err error) {
	if movie.Poster != nil && movie.Poster.URL != "" {
		picURL = movie.Poster.URL
	} else if movie.BackDrop != nil && movie.BackDrop.URL != "" {
		picURL = movie.BackDrop.URL
	} else {
		picURL = "https://habrastorage.org/webt/bh/ex/-z/bhex-zst09dlgq-y2rjespcpp0c.png"
	}

	rating := movie.Rating

	// —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	var sb strings.Builder

	if movie.Name == "" {
		sb.WriteString("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
	} else {
		typeFilm := TypeFilm(movie.TypeNumber)
		sb.WriteString(fmt.Sprintf("%s\n", typeFilm))

		sb.WriteString(fmt.Sprintf("%v (%v) %v+\n", movie.Name, movie.Year, movie.AgeRating))
		for _, genre := range movie.Genres {
			sb.WriteString(fmt.Sprintf("#%v ", genre.Name))
		}
		sb.WriteString("\n")

		if movie.MovieLength != 0 {
			hours := movie.MovieLength / 60
			minutes := movie.MovieLength % 60
			sb.WriteString(fmt.Sprintf("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —á %d –º–∏–Ω\n", hours, minutes))
		}

		sb.WriteString("–°—Ç—Ä–∞–Ω—ã: ")
		if len(movie.Countries) > 0 {
			for i, country := range movie.Countries {
				if i > 0 {
					sb.WriteString(", ")
				}
				sb.WriteString(country.Name)
			}
		} else {
			sb.WriteString("–°—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
		}
		sb.WriteString("\n")

		// –ø–æ–ª–Ω–æ–µ –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
		if utf8.RuneCountInString(movie.Description) < 350 {
			sb.WriteString(fmt.Sprintf("\n–û–ø–∏—Å–∞–Ω–∏–µ: %v\n", movie.Description))
		} else if movie.ShortDescription != "" {
			sb.WriteString(fmt.Sprintf("\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: %v\n", movie.ShortDescription))
		} else {
			sb.WriteString("\n–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.\n–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –Ω–∏–º –Ω–∞–∂–º–∏ <u>–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</u>üëáüèª\n")
		}
		sb.WriteString("\n")
		sb.WriteString(fmt.Sprintf("–ö–ü: %.1f IMDb: %.1f\n", rating.Kp, rating.Imdb))
		filmURL := fmt.Sprintf("<a href=\"https://www.kinopoisk.ru/film/%d/\">–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ</a>\n",
			movie.ID)
		sb.WriteString(filmURL)
	}

	return sb.String(), picURL, nil

}
